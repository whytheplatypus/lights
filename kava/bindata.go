// Code generated by go-bindata.
// sources:
// config
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _config = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x57\xdf\x6f\xe3\xc6\xf1\x7f\xe7\x5f\x31\xdf\x13\x02\xda\x80\xcc\xa3\x7c\xf1\xe5\x7b\x27\xe8\xe1\x90\xa0\x48\x80\x5c\x5f\x2e\x2d\x50\xa4\x81\x31\x24\x87\xe2\x56\xcb\x5d\x66\x77\x56\xb2\xee\xaf\x2f\x66\x96\x92\x69\xe3\x8a\xf6\xc9\xf2\x72\x76\x7e\x7e\xe6\x33\xb3\xab\x15\xfc\xe8\x5d\x6f\xf6\x29\x20\x1b\xef\xa0\x37\x96\xa0\xf7\x01\x7e\xfc\xf4\xf7\x4f\x15\xfc\x44\x3d\x26\xcb\x70\x44\x9b\x28\x02\x06\x82\xd6\x8f\x23\x39\xa6\x0e\x7c\xe2\x0a\xe0\x6f\x91\x80\x0c\x0f\x14\x60\x0b\x3e\xc0\x4a\xaf\xcf\x52\xc6\xed\xab\xa2\x28\x7e\xdf\x93\xa3\x80\xf6\x8f\xa2\x58\x41\x1c\xbd\xe7\xc1\xb8\x3d\x8c\xbe\xa3\x35\xb4\xe8\xa0\x21\x70\x3e\x8c\x68\xd7\x10\x5b\x23\x17\x7b\xd3\x8a\xb6\x13\x1e\x29\x56\xc5\x56\x65\x61\x37\x4b\x15\x50\xac\xe0\x2f\x01\x47\x0a\xc8\x74\xf1\xf2\x23\xbc\xaf\x2b\xf8\xd4\xb6\x34\x71\x04\xef\xec\x19\x9c\x77\x77\x8e\xf6\xc8\xe6\x48\x73\x10\x55\xd1\x5f\x2f\xee\x60\x53\x83\xf8\xf4\x85\x5c\x34\x6c\x8e\x86\xcf\x60\x1c\xc0\x77\x15\xfc\xd2\xc3\xd9\x27\x10\x4f\x0f\xc0\x03\x41\x83\x21\x67\x80\x3d\x58\x7f\x7a\x1b\x28\x4e\xde\x45\x02\x13\xf5\xc8\x30\x5b\x5a\x03\x87\x73\xb1\x02\xe3\xda\x40\x18\x25\x4a\x1e\x4c\xcc\xb6\xe1\xbe\xae\x61\x24\x74\x11\x3a\x9f\x1a\x4b\x30\x90\xd9\x0f\xfc\xbf\x38\xbd\x85\xb8\xf0\x71\x07\x3f\x3c\x88\xdf\x9f\x12\x7b\x39\x87\x93\xb1\x16\x90\x99\xc6\x89\xc5\x9b\x8e\xd4\x3e\xbd\xb8\x65\x7a\x68\xf1\x88\x30\x11\x1e\x62\x05\x1b\xd8\x81\x77\x6b\xa8\xe5\x6f\xdf\x17\x2b\xf0\x47\x0a\x71\xf0\x9e\x01\xad\xf5\xa7\x98\x63\x66\xbf\xf8\x70\x63\x1c\x7c\x07\xbe\x07\xa6\x30\x1a\x87\x76\x8e\xe1\x16\x4e\x86\x07\x9f\x18\x8c\x33\x6c\x50\x4a\x0f\x38\xbb\x57\x6c\xaf\x3f\x25\xe7\xc5\x76\xa1\x70\x07\xf7\xb5\x84\xf2\xdb\x40\xe0\xd2\xd8\x50\x10\xed\x6a\xf8\xa6\xbe\xbb\xaf\xeb\xdb\x0a\x6a\xb8\xe9\x72\x8d\x6f\x21\x12\x47\x30\x1a\xa4\xe8\x84\x9b\x5e\x42\x4f\x13\xb4\xde\x45\x6f\xe9\xb6\x2a\x56\x70\x32\x1d\x0f\x57\x3d\xe8\x3a\x88\x13\xb6\x04\x0d\xf1\x89\xc8\xe5\x63\xe3\x16\x06\xdb\x01\x03\xb6\x4c\x21\x3e\xa3\x3e\x6b\x79\xb7\xb8\xbf\xa9\x0a\xbd\xba\x83\xcd\x7b\x28\xb6\xa2\xe7\x31\x4b\xed\xe0\x7e\xfe\x5f\x24\x25\x78\x09\x54\x02\xfb\xd5\x9f\x28\xa8\x8e\xc1\xec\xa5\x4d\xda\xc4\xbe\xef\xa1\x0f\xf4\x67\x22\xd7\x1a\x8a\xda\x32\xd6\x9f\x28\xf2\xb3\x60\x64\x75\xb3\x58\xcd\xe8\x73\x9d\x64\x58\x53\x3f\x10\x1c\x4d\x4c\x68\xcd\x57\x0a\x6b\x98\x73\xa3\x95\x7a\xa8\xe1\x0e\x36\x75\x5d\xd7\xf0\xf3\xd7\x62\x05\x7f\xf5\x4c\x1f\xe5\x46\x50\xa0\x22\x8c\xc6\x99\x31\x8d\xc0\x9e\xd1\xbe\x50\xfb\xfd\xbb\xcf\xc3\x57\x78\x7a\x55\x85\x4a\x7a\xed\x47\x81\x4d\xc6\x58\x62\x3f\x22\x9b\x16\xad\x3d\x5f\x60\x4e\xea\xd2\x73\x78\x1a\x9f\xe9\x01\x81\xbd\x36\x8b\xda\x11\xfb\x71\xa2\xd6\xf4\x86\x3a\x41\xb4\x44\x1c\x1e\x73\x3a\x1e\x25\x1d\xb0\x13\xff\x8b\xed\xac\xea\xd5\xa7\x1c\x55\x21\x7c\x62\xdc\x94\x58\xd9\x64\x24\x1e\x7c\xa7\x15\xc4\x89\x53\xc8\xb0\xeb\x8c\x5f\xc3\xe4\x63\x34\xd2\x65\x59\x46\x9b\xf7\x23\x94\x53\xb2\x91\xca\x35\x94\x68\x23\x96\x42\x32\x65\x6f\x7a\x5f\x0a\x6e\x7e\x5a\x64\xf2\x3f\x0a\xae\x05\x39\x3c\x20\x83\x0f\x5d\xce\xff\x44\xae\x23\xc7\xe0\x1d\x9c\xe4\x43\x4c\xd3\xe4\x03\xe7\x76\x3b\x61\x84\x26\x19\x05\x14\x0f\xc5\x4a\xfa\xd6\x5a\xd0\x18\xae\xbe\xa5\x48\x51\xb3\x18\x71\x14\x92\x15\x52\x86\x23\x06\x83\x12\x41\x19\x7d\x0a\x2d\x95\x52\x0b\xed\xee\xde\x38\x82\x53\xae\x2a\x43\x1c\x7c\xb2\x1d\xec\x89\x55\x85\xc6\x5f\xa9\x21\x01\x96\xc6\xa1\x67\xcf\x7a\xb4\x96\x4d\xae\x5b\x3e\xab\x9e\x69\xb4\x94\x22\x97\x6b\x38\x0d\xa6\x1d\x9e\x3d\x1b\xbd\x33\xec\xc3\x2c\x7f\x01\xe2\x0c\x3e\x88\xc6\x1d\x8a\x15\xdc\xa0\xb5\x4b\x8b\x72\x1c\x6f\x7c\xe2\x29\x71\xbc\x85\x01\x8f\x04\xe5\xac\xa9\x9c\x55\xc5\x1b\xcd\x45\xbc\x05\x8c\xd1\xb7\x06\x65\xba\x28\x2a\x79\xa0\xf1\xb6\x58\xc1\x1c\x89\x14\xe2\xdb\x31\xe4\xe2\x8b\x37\x47\xf3\x32\x96\xe1\xf4\xf1\x57\xef\xa7\x06\xdb\xc3\x7a\x53\xce\x8a\xa4\x8e\xdf\x56\x34\xa1\x98\xf5\x2a\x71\x27\xd3\x70\xa9\xeb\x2d\x8f\xd3\xdb\x71\xea\x2a\xc5\x81\x00\x75\x86\xdf\x2e\x87\x2c\x2c\x9d\x93\xb3\xd3\x46\x29\x96\x12\xea\x3c\x2c\x45\x5e\xb8\x06\x2f\x84\xc5\xc0\x52\xf4\x85\x65\x6d\x81\x9c\x52\xed\x01\x9f\x9e\x91\x04\x23\x9e\x75\x9c\xb6\x29\x44\x8a\x6b\x99\x26\xf9\xa7\x00\x38\xe0\xa9\x5a\x9c\x98\xcc\x3c\xf1\x1c\x99\xc6\x98\x31\xdd\x79\x8a\xe0\xbc\x62\x58\x20\x3c\xcb\x2a\x0d\x04\x3c\x65\x12\xd9\xbc\x87\xc6\x30\x74\xc8\x08\x91\x03\xe1\x78\x81\x43\x83\x61\x9e\x08\xb3\xbe\x79\xbc\xa7\x48\x9d\xe4\x35\x92\xd3\xbf\x5e\x37\x06\x9c\x26\x6b\x5a\x5d\x3d\xe2\xac\x7f\x49\x66\x32\x2f\x85\x83\xae\x4b\x02\x76\xff\x4a\x51\xd0\xa1\x1d\x38\xcf\x64\x3f\xe9\xea\x82\x8d\x3f\x52\x71\xcd\x60\xc0\x93\xe4\x26\xf3\x24\x44\x3e\x5b\xc9\xc6\x9c\x9d\x32\x32\x05\xf2\xb9\xa9\x47\xef\x7c\xa9\xf1\x7d\xd1\x53\x18\x4d\x08\x3e\x44\x68\x3c\x0f\x32\x18\x9c\x23\x1b\x33\x20\x85\xcb\x96\xc4\x6d\x1c\xb4\xb2\x0d\x05\x61\x8f\xcf\xde\x79\xc0\x23\x05\xdc\xd3\xeb\xdb\xc2\x7f\x73\x17\x80\xa5\x5e\xe7\x57\x90\x34\x5d\x78\x9f\xfd\x95\xf6\x17\x06\x0a\x75\x1c\x76\xd2\x7c\x5e\x57\x15\xc9\x51\x56\x04\x8c\x41\x5a\x7e\x99\xb1\xc8\x9d\x4f\xbc\x06\xcc\x10\xbf\x20\x5b\x58\x5a\xd3\xd6\x5f\x2f\x5d\xca\x4c\x4f\x26\x72\xb1\x15\xbd\x8f\xf3\xb7\x1d\xbc\xed\xe8\xf8\x36\xeb\xba\xd8\xd4\x5a\xf7\xb2\x7e\xf1\xb5\x1c\x8d\x71\x18\xce\x92\x44\x8c\xad\x31\x85\xc8\x3c\x66\x19\x01\xbc\x9e\x15\xab\x8b\x98\x20\xe6\x95\x82\xf2\xff\x1b\xc3\xa5\x0e\xfa\x87\x87\x5b\xad\xc6\xe6\xfd\xe5\xe8\xfd\xc3\xc3\xbb\xfa\x16\x8a\xc6\xf0\xb3\x52\xfd\x2c\x4a\x55\x3b\x8c\xf8\x94\x57\x24\x25\xe5\xf9\x4c\x56\xc5\x80\x6e\x4f\x39\xfe\x90\x1c\xf4\xc1\x8f\x50\x4b\x86\xf2\x26\x76\x9d\x43\x20\x1c\x2a\xfb\x89\x5c\x7d\x1c\xf1\xe9\x31\xdf\x94\x49\x54\xd7\xcf\x86\x3a\xb2\x66\x34\xb2\x1f\x2c\x2c\xcd\x5e\x11\xb6\x83\x02\x5f\x8a\xac\xdb\xa5\x8e\x3a\x9a\x30\x68\xd6\x9b\x33\xe0\x42\x81\x40\x25\x45\xe1\xaa\xd6\x8c\x68\x67\x8f\xae\x4a\x59\x19\xff\xc6\x54\x54\xc1\xc3\x07\xd8\x41\xb9\x2d\x55\xf3\x46\x16\xb5\xf2\x9f\xae\x84\x1b\x2b\xf4\xdf\x13\x75\xb7\x92\x1f\x0c\x8f\x57\xed\xe2\xf8\x87\xbc\xe2\xbe\x38\xdc\xd4\x85\xd2\x46\xeb\xad\x0f\x79\x0f\xcf\x33\x8a\x3a\xd0\xb3\x79\x3c\x06\xea\xd6\xb0\x0f\x44\x6e\x0d\x67\x92\x2d\x50\x9a\x66\x4f\x8e\x71\x0d\xed\x19\x9d\x8e\x05\xa6\x35\x34\x9a\xf5\xc6\x62\x7b\xa8\x74\xf5\x69\x0f\xfb\xe0\x93\x93\xe6\xd3\xd3\x62\x2b\x09\xa2\xeb\xa1\xdc\x16\x17\xae\x0f\x80\x3c\xc0\x93\x65\x33\x59\x43\x41\xb9\x48\xba\xda\x38\xa6\x7d\x90\xae\xbd\x3e\x15\x5a\xb4\x6d\xb2\x99\x28\x2a\xf8\x0d\x0f\x14\x2f\x8f\x92\xb9\xb4\x77\x50\x57\x1f\x3e\x48\x6e\x7f\xce\x7b\xc8\xfc\x39\xef\xdb\x59\x93\x0c\xeb\x26\x31\x58\x8a\x11\xa6\x40\xad\x89\x54\x65\x58\x74\x26\x4a\xde\x25\x92\xab\xf9\x1d\xd4\xd5\x0f\xda\x74\xf3\x57\xe5\x50\x72\xf9\x67\x1e\x9d\x77\xb2\x08\x51\x07\x6f\x3e\x7b\x27\xa4\xd2\xca\xf4\xbf\xb8\xfd\x66\x31\x3c\x36\x15\x7c\x21\x6d\xf3\xd7\xf6\xc6\xe7\x9b\x3b\xd8\xcc\xef\x11\x86\x7d\x40\xdd\xda\x5f\x25\xe8\x4d\x17\xfc\x24\xfb\xfa\x9b\xea\x9b\x91\x2a\x25\x2a\xee\x55\xb0\x47\xd1\xad\xec\xf6\x5f\x1f\x19\x50\x57\x0f\xb3\x96\x01\x6d\x7f\xf1\x60\x0d\xf7\x2f\x5e\x2d\xdf\x0c\x64\xe9\x57\xb1\xbd\x3a\x2f\x01\x81\xae\xc1\xbf\xb8\xc5\x6c\x58\xcf\x2f\x0b\x19\x10\x27\xdd\x5d\x74\x31\x68\x64\x37\xd7\xad\x30\x7f\xd2\xa7\x93\xc6\x22\x4c\xd5\x10\x74\x01\x4f\x4e\x6b\xb4\x77\x3e\x48\x97\xea\x42\xf8\x3b\xfd\xf9\x47\x7e\x43\x18\x09\x2f\x3f\xc9\x82\x69\x0f\xe7\x0a\xfe\xe1\x93\xb2\x8d\x1a\xc0\x08\x63\x6a\x07\x38\xd0\x39\xca\x3f\xf2\xc2\x3b\xa1\xe3\x3c\xdd\x68\x24\xdd\x7c\xd9\x43\x72\xf3\x0b\x16\x46\xb1\xc3\x03\x39\x55\x7c\xa0\xf3\xff\xc1\x67\x39\x52\x15\xbb\xfc\x39\x43\xc9\x78\x57\xe9\xbe\xef\x0f\x80\x0c\x81\xb0\x1b\xa9\x1a\x3b\xd9\x0a\xf7\x86\x87\xd4\xe4\xdd\x23\x05\x9d\x7d\xf4\x34\x59\x74\x19\xd2\xda\xdf\xf4\x84\xe3\x64\xf3\x63\x6f\xa3\x99\x5b\x41\x83\x51\x5e\x4f\xf7\xf3\xb3\xe9\xdd\x7c\x3c\x9a\x8e\xbd\x13\xde\xfa\x7e\xfe\xf2\x30\x7f\xe1\x40\x8d\xa5\xe2\xdf\x01\x00\x00\xff\xff\x4d\x8f\xfd\xf0\xd9\x0f\x00\x00")

func configBytes() ([]byte, error) {
	return bindataRead(
		_config,
		"config",
	)
}

func config() (*asset, error) {
	bytes, err := configBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config", size: 4057, mode: os.FileMode(420), modTime: time.Unix(1504793646, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config": config,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{config, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

